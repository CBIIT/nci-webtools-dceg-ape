name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - "*_dev"
      - "*_qa"

env:
  APP: "ape"
  TZ: America/New_York
  AWS_REGION: us-east-1
  TASK_DEFINITION_TEMPLATE_PATH: .aws
  DOCKER_BUILDKIT: 1

jobs:
  Deploy:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: ${{ (endsWith(github.ref, '_dev') && 'dev') || (endsWith(github.ref, '_qa') && 'qa') || inputs.environment || 'dev' }}
    env:
      FRONTEND_CONTAINER_PORT: 80
      BACKEND_CONTAINER_PORT: 9000
      PARAMETER_PATH: "/analysistools/${TIER}/${APP}"
      TIER: ${{ (endsWith(github.ref, '_dev') && 'dev') || (endsWith(github.ref, '_qa') && 'qa') || 'dev' }}

    steps:
      - uses: "actions/checkout@v4"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          VERSION=$(echo "$BRANCH_NAME" | awk -F'_' '{print $2}')
          DATE=$(echo "$BRANCH_NAME" | awk -F'_' '{print $3}')
          echo "VERSION=${VERSION:-unknown_version}" >> $GITHUB_ENV
          echo "DATE=${DATE:-unknown_date}" >> $GITHUB_ENV

          REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$APP
          echo "IMAGE_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$REPO:$TIER-frontend-$VERSION-$DATE" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$REPO:$TIER-backend-$VERSION-$DATE" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_LATEST=$REPO:$TIER-frontend-$VERSION-latest" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_LATEST=$REPO:$TIER-backend-$VERSION-latest" >> $GITHUB_ENV

      - uses: dkershner6/aws-ssm-getparameters-action@v2
        with:
          parameterPairs: |
            ${{ env.PARAMETER_PATH }}/ecs_cluster = ECS_CLUSTER
            ${{ env.PARAMETER_PATH }}/ecs_web_task = ECS_WEB_TASK
            ${{ env.PARAMETER_PATH }}/ecs_web_task_cpu_units = ECS_CLUSTER
            ${{ env.PARAMETER_PATH }}/ecs_web_task_memory_units = ECS_CLUSTER
            ${{ env.PARAMETER_PATH }}/ecs_web_service = ECS_WEB_SERVICE
            ${{ env.PARAMETER_PATH }}/role_arn = ROLE_ARN
            ${{ env.PARAMETER_PATH }}/efs_filesystem_id = EFS_FILESYSTEM_ID
            ${{ env.PARAMETER_PATH }}/efs_access_point_id = EFS_ACCESS_POINT_ID
            ${{ env.PARAMETER_PATH }}/application_path = APPLICATION_PATH
          withDecryption: "true"

      - name: Update client/nextjs env variables
        run: envsubst < client/.env.local > client/.env.production
        env:
          NEXT_PUBLIC_VERSION: $VERSION
          NEXT_PUBLIC_LAST_UPDATE: $DATE

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build backend image ${{ env.BACKEND_IMAGE }}
        id: build-backend-image
        run: |
          docker build \
            -t $BACKEND_IMAGE \
            -t $BACKEND_IMAGE_LATEST \
            -f docker/backend.dockerfile \
            ./

          docker push $BACKEND_IMAGE
          docker push $BACKEND_IMAGE_LATEST

      - name: Build frontend image ${{ env.FRONTEND_IMAGE }}
        id: build-frontend-image
        run: |
          docker build \
           -t $FRONTEND_IMAGE \
           -t $FRONTEND_IMAGE_LATEST \
           --build-arg API_BASE_URL=http://localhost:$BACKEND_CONTAINER_PORT \
           -f docker/frontend.dockerfile \
           ./

           docker push $FRONTEND_IMAGE
           docker push $FRONTEND_IMAGE_LATEST

      - name: render task definition for frontend
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_TEMPLATE_PATH }}/web.json
          container-name: frontend
          image: ${{ env.FRONTEND_IMAGE_LATEST }}
        env:
          # FRONTEND_IMAGE_LATEST: ${{ env.FRONTEND_IMAGE_LATEST }}
          ECS_WEB_TASK: ${{ env.ECS_WEB_TASK }}
          ECS_WEB_TASK_CPU_UNITS: ${{ env.ECS_WEB_TASK_CPU_UNITS }}
          ECS_WEB_TASK_MEMORY_UNITS: ${{ env.ECS_WEB_TASK_MEMORY_UNITS }}
          ROLE_ARN: ${{ env.ROLE_ARN }}
          EFS_FILESYSTEM_ID: ${{ env.EFS_FILESYSTEM_ID }}
          EFS_ACCESS_POINT_ID: ${{ env.EFS_ACCESS_POINT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TIER: ${{ env.TIER }}
          APP: ${{ env.APP }}
          FRONTEND_CONTAINER_PORT: ${{ env.FRONTEND_CONTAINER_PORT }}
          BACKEND_CONTAINER_PORT: ${{ env.BACKEND_CONTAINER_PORT }}

      - name: render task definition for backend
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend.outputs.task-definition }}
          container-name: frontend
          image: ${{ env.BACKEND_IMAGE_LATEST }}
        env:
          # BACKEND_IMAGE_LATEST: ${{ env.BACKEND_IMAGE_LATEST }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TIER: ${{ env.TIER }}
          APP: ${{ env.APP }}
          BACKEND_CONTAINER_PORT: ${{ env.BACKEND_CONTAINER_PORT }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend.outputs.task-definition }}
          service: ${{ env.ECS_WEB_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          propagate-tags: SERVICE
