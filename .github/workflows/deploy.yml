name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - "*_dev"
      - "*_qa"

env:
  APP: ape
  TZ: America/New_York
  AWS_REGION: us-east-1
  TASK_DEFINITION_TEMPLATE_PATH: .aws
  DOCKER_BUILDKIT: 1

jobs:
  Deploy:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: ${{ (endsWith(github.ref, '_dev') && 'dev') || (endsWith(github.ref, '_qa') && 'qa') || inputs.environment || 'dev' }}
    env:
      FRONTEND_CONTAINER_PORT: 80
      BACKEND_CONTAINER_PORT: 9000
      TIER: ${{ (endsWith(github.ref, '_dev') && 'dev') || (endsWith(github.ref, '_qa') && 'qa') || 'dev' }}
      BATCH_INSTANCE_TYPE: g6.xlarge
      BATCH_CPU_UNITS: 4
      BATCH_GPU_UNITS: 1
      BATCH_MEMORY_UNITS: 16
    steps:
      - uses: "actions/checkout@v4"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set dynamic environment variables
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          VERSION=$(echo "$BRANCH_NAME" | awk -F'_' '{print $2}')
          DATE=$(echo "$BRANCH_NAME" | awk -F'_' '{print $3}')
          echo "VERSION=${VERSION:-unknown_version}" >> $GITHUB_ENV
          echo "DATE=${DATE:-unknown_date}" >> $GITHUB_ENV

          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$APP
          echo "IMAGE_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$REPO:$TIER-frontend-${{ github.ref_name }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$REPO:$TIER-backend-${{ github.ref_name }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "BATCH_WORKER_IMAGE=$REPO:$TIER-batch-worker-${{ github.ref_name }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_LATEST=$REPO:$TIER-frontend-${{ github.ref_name }}-latest" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_LATEST=$REPO:$TIER-backend-${{ github.ref_name }}-latest" >> $GITHUB_ENV
          echo "BATCH_WORKER_IMAGE_LATEST=$REPO:$TIER-batch-worker-${{ github.ref_name }}-latest" >> $GITHUB_ENV
          echo "PARAMETER_PATH=/analysistools/${TIER}/${APP}" >> $GITHUB_ENV
          echo "ENVIRONMENT_TIER=${TIER^^}" >> $GITHUB_ENV

      - uses: dkershner6/aws-ssm-getparameters-action@v2
        with:
          parameterPairs: |
            ${{ env.PARAMETER_PATH }}/ecs_cluster = ECS_CLUSTER,
            ${{ env.PARAMETER_PATH }}/ecs_web_task = ECS_WEB_TASK,
            ${{ env.PARAMETER_PATH }}/ecs_web_task_cpu_units = ECS_WEB_TASK_CPU_UNITS,
            ${{ env.PARAMETER_PATH }}/ecs_web_task_memory_units = ECS_WEB_TASK_MEMORY_UNITS,
            ${{ env.PARAMETER_PATH }}/ecs_web_service = ECS_WEB_SERVICE,
            ${{ env.PARAMETER_PATH }}/role_arn = ROLE_ARN,
            ${{ env.PARAMETER_PATH }}/efs_filesystem_id = EFS_FILESYSTEM_ID,
            ${{ env.PARAMETER_PATH }}/efs_access_point_id = EFS_ACCESS_POINT_ID,
            ${{ env.PARAMETER_PATH }}/application_path = APPLICATION_PATH,
            ${{ env.PARAMETER_PATH }}/batch_compute_environment = BATCH_COMPUTE_ENVIRONMENT,
            ${{ env.PARAMETER_PATH }}/batch_job_definition = BATCH_JOB_DEFINITION,
            ${{ env.PARAMETER_PATH }}/batch_role_arn = BATCH_ROLE_ARN
          withDecryption: "true"

      - name: Create client/nextjs .env.production file
        run: |
          echo "NEXT_PUBLIC_VERSION=$VERSION" > client/.env.production
          echo "NEXT_PUBLIC_LAST_UPDATE=$DATE" >> client/.env.production
          echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:$BACKEND_CONTAINER_PORT" >> client/.env.production
        env:
          VERSION: $VERSION
          DATE: $DATE

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build backend image ${{ env.BACKEND_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/backend.dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}
            ${{ env.BACKEND_IMAGE_LATEST }}
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE_LATEST }}
          cache-to: type=inline,mode=min

      - name: Build frontend image ${{ env.FRONTEND_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend.dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}
            ${{ env.FRONTEND_IMAGE_LATEST }}
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE_LATEST }}
          cache-to: type=inline,mode=min

      - name: Build batch image ${{ env.BATCH_WORKER_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/batch-gpu-worker.dockerfile
          push: true
          tags: |
            ${{ env.BATCH_WORKER_IMAGE }}
            ${{ env.BATCH_WORKER_IMAGE_LATEST }}
          cache-from: type=registry,ref=${{ env.BATCH_WORKER_IMAGE_LATEST }}
          cache-to: type=inline,mode=min

      - name: render task definition for frontend
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_TEMPLATE_PATH }}/web.json
          task-definition-family: ${{ env.ECS_WEB_TASK }}
          container-name: frontend
          image: ${{ env.FRONTEND_IMAGE_LATEST }}
          environment-variables: |
            API_BASE_URL=http://localhost:${{ env.BACKEND_CONTAINER_PORT }}
            TZ=${{ env.TZ }}
          secrets: |
            APP_PATH=/analysistools/${{ env.TIER }}/${{ env.APP }}/application_path
          log-configuration-log-driver: awsfirelens
          log-configuration-options: |
            Name=datadog
            tls=on
            tls.verify=off
            dd_service=${{ env.TIER }}-${{ env.APP }}-frontend
            dd_source=httpd
            dd_tags=project:${{ env.APP }} tier:${{ env.TIER }}
            provider=ecs

      - name: render task definition for backend
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend.outputs.task-definition }}
          container-name: backend
          image: ${{ env.BACKEND_IMAGE_LATEST }}
          environment-variables: |
            AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            APP_NAME=${{ env.APP }}
            APP_PORT=${{ env.BACKEND_CONTAINER_PORT }}
            APP_TIER=${{ env.TIER }}
            WORKER_TYPE=batch
            TZ=${{ env.TZ }}
          secrets: |
            APP_BASE_URL=/analysistools/${{ env.TIER }}/${{ env.APP }}/base_url
            API_BASE_URL=/analysistools/${{ env.TIER }}/${{ env.APP }}/base_url
            LOG_LEVEL=/analysistools/${{ env.TIER }}/datadog/log_level
            DATA_FOLDER=/analysistools/${{ env.TIER }}/${{ env.APP }}/data_folder
            INPUT_FOLDER=/analysistools/${{ env.TIER }}/${{ env.APP }}/input_folder
            OUTPUT_FOLDER=/analysistools/${{ env.TIER }}/${{ env.APP }}/output_folder
            VPC_ID=/analysistools/${{ env.TIER }}/${{ env.APP }}/vpc_id
            SUBNET_IDS=/analysistools/${{ env.TIER }}/${{ env.APP }}/subnet_ids
            SECURITY_GROUP_IDS=/analysistools/${{ env.TIER }}/${{ env.APP }}/security_group_ids
            ECS_CLUSTER=/analysistools/${{ env.TIER }}/${{ env.APP }}/ecs_cluster
            WORKER_TASK_NAME=/analysistools/${{ env.TIER }}/${{ env.APP }}/ecs_worker_task
            EMAIL_ADMIN=/analysistools/${{ env.TIER }}/${{ env.APP }}/email_admin
            EMAIL_SMTP_HOST=/analysistools/${{ env.TIER }}/${{ env.APP }}/email_smtp_host
            EMAIL_SMTP_PORT=/analysistools/${{ env.TIER }}/${{ env.APP }}/email_smtp_port
          log-configuration-log-driver: awsfirelens
          log-configuration-options: |
            Name=datadog
            tls=on
            tls.verify=off
            dd_service=${{ env.TIER }}-${{ env.APP }}-backend
            dd_source=nodejs
            dd_tags=project:${{ env.APP }} tier:${{ env.TIER }}
            provider=ecs

      - name: substitute task definition variables
        id: substitute-task-definition
        run: |
          echo "Substituting task definition variables"
          envsubst < ${{ steps.render-backend.outputs.task-definition }} > web.json
        env:
          ECS_WEB_TASK_CPU_UNITS: ${{ env.ECS_WEB_TASK_CPU_UNITS }}
          ECS_WEB_TASK_MEMORY_UNITS: ${{ env.ECS_WEB_TASK_MEMORY_UNITS }}
          ROLE_ARN: ${{ env.ROLE_ARN }}
          EFS_FILESYSTEM_ID: ${{ env.EFS_FILESYSTEM_ID }}
          EFS_ACCESS_POINT_ID: ${{ env.EFS_ACCESS_POINT_ID }}
          FRONTEND_CONTAINER_PORT: ${{ env.FRONTEND_CONTAINER_PORT }}
          BACKEND_CONTAINER_PORT: ${{ env.BACKEND_CONTAINER_PORT }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TIER: ${{ env.TIER }}
          APP: ${{ env.APP }}
          ENVIRONMENT_TIER: ${{ env.ENVIRONMENT_TIER}}

      - name: Print rendered task definition
        run: |
          echo "Rendered web Task Definition:"
          cat web.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: web.json
          service: ${{ env.ECS_WEB_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          desired-count: 1
          force-new-deployment: true
          propagate-tags: true

      - name: substitute batch job definition variables
        id: substitute-batch-job-definition
        run: |
          echo "Substituting task definition variables"
          envsubst < $TASK_DEFINITION_TEMPLATE_PATH/batch-worker.json > batch-worker.json
        env:
          BATCH_JOB_DEFINITION: ${{ env.BATCH_JOB_DEFINITION }}
          BATCH_WORKER_IMAGE_LATEST: ${{ env.BATCH_WORKER_IMAGE_LATEST }}
          BATCH_ROLE_ARN: ${{ env.BATCH_ROLE_ARN }}
          EFS_FILESYSTEM_ID: ${{ env.EFS_FILESYSTEM_ID }}
          EFS_ACCESS_POINT_ID: ${{ env.EFS_ACCESS_POINT_ID }}
          BATCH_GPU_UNITS: ${{ env.BATCH_GPU_UNITS }}
          BATCH_CPU_UNITS: ${{ env.BATCH_CPU_UNITS }}
          BATCH_MEMORY_UNITS: ${{ env.BATCH_MEMORY_UNITS }}
          AWS_REGION: ${{ env.AWS_REGION }}
          APP: ${{ env.APP }}
          TIER: ${{ env.TIER }}
          VERSION: ${{ env.VERSION }}
          TZ: ${{ env.TZ }}
          COMMIT_ID: ${{ github.sha }}

      - name: Print rendered task definition
        run: |
          echo "Rendered web Task Definition:"
          cat batch-worker.json

      - name: Register batch job definitions
        run: "aws batch register-job-definition --cli-input-json file://batch-worker.json"

      - name: Update batch compute environment instance type
        run: |
          aws batch update-compute-environment \
            --compute-environment $BATCH_COMPUTE_ENVIRONMENT \
            --compute-resources "{\"instanceTypes\":[\"$BATCH_INSTANCE_TYPE\"]}"
